const sgMail = require('@sendgrid/mail');

class EmailService {
  constructor() {
    this.sendgridApiKey = process.env.SENDGRID_API_KEY;
    this.fromEmail = process.env.FROM_EMAIL;
    this.toEmail = process.env.TO_EMAIL;
    
    if (this.sendgridApiKey) {
      sgMail.setApiKey(this.sendgridApiKey);
    }
  }

  async sendTestReport(report, customEmail = null) {
    try {
      console.log(`ðŸ“§ Sending test report email: ${report.id}`);
      
      if (!this.sendgridApiKey) {
        console.warn('SendGrid API key not configured, skipping email send');
        return { success: false, message: 'SendGrid not configured' };
      }

      const emailContent = await this.generateEmailContent(report);
      const recipientEmail = customEmail || this.toEmail;
      
      if (!recipientEmail) {
        throw new Error('No recipient email configured');
      }

      const msg = {
        to: recipientEmail,
        from: this.fromEmail,
        subject: emailContent.subject,
        html: emailContent.html,
        text: emailContent.text,
        attachments: await this.prepareAttachments(report)
      };

      const response = await sgMail.send(msg);
      
      console.log(`âœ… Email sent successfully to ${recipientEmail}`);
      
      return {
        success: true,
        messageId: response[0].headers['x-message-id'],
        recipient: recipientEmail
      };

    } catch (error) {
      console.error('Email sending error:', error);
      
      // Return mock success if SendGrid is not available
      if (error.code === 'UNAUTHORIZED' || error.code === 'FORBIDDEN') {
        console.warn('SendGrid authentication failed, using mock response');
        return {
          success: true,
          messageId: 'mock-message-id',
          recipient: customEmail || this.toEmail,
          isMock: true
        };
      }
      
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }

  async generateEmailContent(report) {
    const { id, testCase, platform, result, duration, summary, error } = report;
    
    const emailSubject = `Test Report - ${result} - ${testCase}`;
    
    const emailBody = `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .status-badge { display: inline-block; padding: 8px 16px; border-radius: 20px; font-weight: bold; }
        .status-pass { background: #28a745; color: white; }
        .status-fail { background: #dc3545; color: white; }
        .summary { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .summary-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }
        .summary-item { text-align: center; }
        .summary-label { font-size: 0.9rem; color: #666; margin-bottom: 5px; }
        .summary-value { font-size: 1.5rem; font-weight: bold; }
        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 0.9rem; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>Test Execution Report</h2>
            <p><strong>Test ID:</strong> ${id}</p>
            <p><strong>Test Case:</strong> ${testCase}</p>
            <p><strong>Platform:</strong> ${platform}</p>
            <div class="status-badge ${result === 'PASS' ? 'status-pass' : 'status-fail'}">
                ${result}
            </div>
        </div>

        <div class="summary">
            <h3>Test Summary</h3>
            <div class="summary-grid">
                <div class="summary-item">
                    <div class="summary-label">Duration</div>
                    <div class="summary-value">${duration}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Success Rate</div>
                    <div class="summary-value">${summary.successRate}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Total Steps</div>
                    <div class="summary-value">${summary.totalSteps}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Screenshots</div>
                    <div class="summary-value">${summary.totalScreenshots}</div>
                </div>
            </div>
        </div>

        ${error ? `
        <div class="summary">
            <h3>Error Details</h3>
            <p style="color: #dc3545; background: #f8d7da; padding: 15px; border-radius: 5px;">
                ${error}
            </p>
        </div>
        ` : ''}

        <div class="footer">
            <p>This report was automatically generated by Autosana Test Automation Platform</p>
            <p>For detailed information, please check the full report in the dashboard</p>
        </div>
    </div>
</body>
</html>
    `;

    return {
      subject: emailSubject,
      html: emailBody,
      text: this.generateTextEmail(report)
    };
  }

  generateTextEmail(report) {
    const { id, testCase, platform, result, duration, summary, error } = report;
    
    return `
Test Execution Report
====================

Test ID: ${id}
Test Case: ${testCase}
Platform: ${platform}
Result: ${result}
Duration: ${duration}

Summary:
- Success Rate: ${summary.successRate}
- Total Steps: ${summary.totalSteps}
- Passed Steps: ${summary.passedSteps}
- Failed Steps: ${summary.failedSteps}
- Screenshots: ${summary.totalScreenshots}

${error ? `Error: ${error}` : ''}

This report was automatically generated by Autosana Test Automation Platform.
    `;
  }

  async prepareAttachments(report) {
    const attachments = [];
    
    try {
      // Add JSON report as attachment
      const reportPath = `./reports/${report.id}/report.json`;
      const fs = require('fs-extra');
      
      if (await fs.pathExists(reportPath)) {
        const reportContent = await fs.readFile(reportPath, 'utf8');
        attachments.push({
          content: Buffer.from(reportContent).toString('base64'),
          filename: `test-report-${report.id}.json`,
          type: 'application/json',
          disposition: 'attachment'
        });
      }

      // Add screenshots as attachments
      if (report.screenshots && report.screenshots.length > 0) {
        for (const screenshot of report.screenshots.slice(0, 3)) { // Limit to 3 screenshots
          try {
            const screenshotPath = screenshot.path.replace('/reports/', './reports/');
            if (await fs.pathExists(screenshotPath)) {
              const screenshotContent = await fs.readFile(screenshotPath);
              attachments.push({
                content: screenshotContent.toString('base64'),
                filename: `${screenshot.name}.png`,
                type: 'image/png',
                disposition: 'attachment'
              });
            }
          } catch (error) {
            console.warn(`Failed to attach screenshot ${screenshot.name}:`, error.message);
          }
        }
      }

    } catch (error) {
      console.warn('Failed to prepare attachments:', error.message);
    }

    return attachments;
  }

  async sendBatchReports(reports, recipientEmail = null) {
    try {
      console.log(`ðŸ“§ Sending batch email reports: ${reports.length} reports`);
      
      if (!this.sendgridApiKey) {
        console.warn('SendGrid API key not configured, skipping batch email send');
        return { success: false, message: 'SendGrid not configured' };
      }

      const email = recipientEmail || this.toEmail;
      if (!email) {
        throw new Error('No recipient email configured');
      }

      // Generate batch email content
      const batchContent = this.generateBatchEmailContent(reports);
      
      const msg = {
        to: email,
        from: this.fromEmail,
        subject: `Batch Test Report - ${reports.length} Tests`,
        html: batchContent.html,
        text: batchContent.text
      };

      const response = await sgMail.send(msg);
      
      console.log(`âœ… Batch email sent successfully to ${email}`);
      
      return {
        success: true,
        messageId: response[0].headers['x-message-id'],
        recipient: email,
        reportCount: reports.length
      };

    } catch (error) {
      console.error('Batch email sending error:', error);
      throw new Error(`Failed to send batch email: ${error.message}`);
    }
  }

  generateBatchEmailContent(reports) {
    const totalReports = reports.length;
    const passedReports = reports.filter(r => r.result === 'PASS').length;
    const failedReports = reports.filter(r => r.result === 'FAIL').length;
    const successRate = totalReports > 0 ? ((passedReports / totalReports) * 100).toFixed(1) : '0.0';

    const html = `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; text-align: center; }
        .summary { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .summary-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; }
        .summary-item { text-align: center; }
        .summary-label { font-size: 0.9rem; color: #666; margin-bottom: 5px; }
        .summary-value { font-size: 1.5rem; font-weight: bold; }
        .reports-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        .reports-table th, .reports-table td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        .reports-table th { background: #f8f9fa; font-weight: bold; }
        .status-pass { color: #28a745; font-weight: bold; }
        .status-fail { color: #dc3545; font-weight: bold; }
        .footer { text-align: center; margin-top: 30px; color: #666; font-size: 0.9rem; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>Batch Test Execution Report</h2>
            <p>${totalReports} tests executed</p>
        </div>

        <div class="summary">
            <h3>Summary</h3>
            <div class="summary-grid">
                <div class="summary-item">
                    <div class="summary-label">Total Tests</div>
                    <div class="summary-value">${totalReports}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Passed</div>
                    <div class="summary-value" style="color: #28a745;">${passedReports}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Failed</div>
                    <div class="summary-value" style="color: #dc3545;">${failedReports}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Success Rate</div>
                    <div class="summary-value">${successRate}%</div>
                </div>
            </div>
        </div>

        <div class="summary">
            <h3>Test Results</h3>
            <table class="reports-table">
                <thead>
                    <tr>
                        <th>Test ID</th>
                        <th>Test Case</th>
                        <th>Platform</th>
                        <th>Result</th>
                        <th>Duration</th>
                    </tr>
                </thead>
                <tbody>
                    ${reports.map(report => `
                        <tr>
                            <td>${report.id}</td>
                            <td>${report.testCase}</td>
                            <td>${report.platform}</td>
                            <td class="status-${report.result.toLowerCase()}">${report.result}</td>
                            <td>${report.duration}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>

        <div class="footer">
            <p>This batch report was automatically generated by Autosana Test Automation Platform</p>
            <p>For detailed information, please check the individual reports in the dashboard</p>
        </div>
    </div>
</body>
</html>
    `;

    const text = `
Batch Test Execution Report
==========================

Total Tests: ${totalReports}
Passed: ${passedReports}
Failed: ${failedReports}
Success Rate: ${successRate}%

Test Results:
${reports.map(report => `
- ${report.id}: ${report.testCase} (${report.platform}) - ${report.result} - ${report.duration}
`).join('')}

This batch report was automatically generated by Autosana Test Automation Platform.
    `;

    return { html, text };
  }

  async validateEmailConfiguration() {
    const issues = [];
    
    if (!this.sendgridApiKey) {
      issues.push('SendGrid API key not configured');
    }
    
    if (!this.fromEmail) {
      issues.push('From email not configured');
    }
    
    if (!this.toEmail) {
      issues.push('To email not configured');
    }
    
    return {
      isValid: issues.length === 0,
      issues
    };
  }
}

module.exports = new EmailService();
